repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }

    // a repository to download specific Kotlin Gradle plugin artifacts directly form TeamCity
    maven {
        url "https://teamcity.jetbrains.com/guestAuth/app/rest/builds/id:$custom_build_id/artifacts/content/maven"
    }
    maven {
        url "https://packages.jetbrains.team/maven/ktor-dev"
        credentials {
            username = "$usr"
            password = "$pwd"
        }
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-native-cocoapods'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 24 // required to be able to use static interfaces in okhttp
        targetSdkVersion 28
        versionCode 1
        versionName "$appversion"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    // allow Activities placement under `kotlin` dirs
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        /* work around https://github.com/Kotlin/kotlinx.coroutines/issues/1064 and the related problems */
        pickFirst 'META-INF/ktor-http.kotlin_module'
        pickFirst 'META-INF/ktor-utils.kotlin_module'
        pickFirst 'META-INF/ktor-http-cio.kotlin_module'
        pickFirst 'META-INF/ktor-client-core.kotlin_module'
        pickFirst 'META-INF/ktor-client-serialization.kotlin_module'
        pickFirst 'META-INF/ktor-client-json.kotlin_module'
        pickFirst 'META-INF/ktor-io.kotlin_module'
        pickFirst 'META-INF/kotlinx-serialization-runtime.kotlin_module'
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/kotlinx-io.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-io.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }

    /*
        Enable desugaring to allow usage of `dexing-min-sdk=24` and, therefore,
        transform artifact 'okhttp.jar (com.squareup.okhttp3:okhttp:3.14.2)'
        to match attributes
        */
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-rc01'
    testImplementation 'junit:junit:4.13'
}

version = "$appversion"

kotlin {
    android("android") {
        compilations.all {
            kotlinOptions.jvmTarget = "1.8"
        }
    }
    // Create and configure iOS simulator target.
    /*
    * We may need several binaries to use it with Xcode:
    * - iOS arm64 debug --- the binary to run the iOS device in debug mode
    * - iOS arm64 release --- the binary to include into a release version of an app
    * - iOS x64 debug --- the binary for iOS simulator, which uses the desktop mac CPU
    *
    * Note that `native.cocoapods` enables by default generation of debug and release
    * frameworks as output binaries for all iOS and macOS targets.
    * See more here: https://kotlinlang.org/docs/reference/native/cocoapods.html
    * */

    iosX64("ios") {}
    // NB: Kotlin/Native supports ObjC pods only!
    /*
    * Here we configure podfile for the project.
    * With cocoapods (enabled by `native.cocoapods` plugin),
    * we don't need to generate Xcode framework anymore;
    * the K/N part, instead, is imported into Xcode via
    * cocoapods mechanism.
    * A short and clear intro is here: https://medium.com/@yuyaHorita/setup-kotlin-native-project-with-cocoapods-7036dd72366f
    * */
    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "A Kotlin/Native module for iOS sample app"
        homepage = "https://github.com/wild-lynx/sample-mpp-app"
    }


    // allows using `@UseExperimental` annotation for serialization
    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental", '-Xopt-in=kotlin.RequiresOptIn']
            }
        }
    }
    sourceSets {
        all {
            languageSettings.useExperimentalAnnotation("kotlin.RequiresOptIn")
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation("io.ktor:ktor-client-serialization:$ktor_version")
                implementation "io.ktor:ktor-client-core:$ktor_version"

                // updated to Kotlin 1.4-M3 way of declaring library dependencies
                if ("$kotlin_version" == "1.3.72") {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                } else {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                }
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-annotations-common')
                implementation kotlin('test-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                // see https://github.com/jaredrummler/AndroidDeviceNames for the details
                implementation "com.jaredrummler:android-device-names:$android_device_names_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-okhttp:$ktor_version"

                if ("$kotlin_version" == "1.3.72") {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
                    implementation("io.ktor:ktor-client-serialization:$ktor_version")
                    implementation("io.ktor:ktor-client-serialization-jvm:$ktor_version")
                }
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                if ("$kotlin_version" == "1.3.72") {
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
                    implementation("io.ktor:ktor-client-serialization-native:$ktor_version")
                    implementation("io.ktor:ktor-client-ios:$ktor_version")
                }
                implementation("io.ktor:ktor-client-ios:$ktor_version")
            }
        }
        iosTest {
            dependencies {
                implementation kotlin('test')
            }
        }
    }
}